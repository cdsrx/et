// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sportsevents.proto

package sportsevents

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SportsEvents service

func NewSportsEventsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SportsEvents service

type SportsEventsService interface {
	// ListEvents will return a collection of all events.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...client.CallOption) (*ListEventsResponse, error)
	// GetEvent will return an event that matches the event id
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...client.CallOption) (*GetEventsResponse, error)
}

type sportsEventsService struct {
	c    client.Client
	name string
}

func NewSportsEventsService(name string, c client.Client) SportsEventsService {
	return &sportsEventsService{
		c:    c,
		name: name,
	}
}

func (c *sportsEventsService) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...client.CallOption) (*ListEventsResponse, error) {
	req := c.c.NewRequest(c.name, "SportsEvents.ListEvents", in)
	out := new(ListEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsEventsService) GetEvent(ctx context.Context, in *GetEventRequest, opts ...client.CallOption) (*GetEventsResponse, error) {
	req := c.c.NewRequest(c.name, "SportsEvents.GetEvent", in)
	out := new(GetEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SportsEvents service

type SportsEventsHandler interface {
	// ListEvents will return a collection of all events.
	ListEvents(context.Context, *ListEventsRequest, *ListEventsResponse) error
	// GetEvent will return an event that matches the event id
	GetEvent(context.Context, *GetEventRequest, *GetEventsResponse) error
}

func RegisterSportsEventsHandler(s server.Server, hdlr SportsEventsHandler, opts ...server.HandlerOption) error {
	type sportsEvents interface {
		ListEvents(ctx context.Context, in *ListEventsRequest, out *ListEventsResponse) error
		GetEvent(ctx context.Context, in *GetEventRequest, out *GetEventsResponse) error
	}
	type SportsEvents struct {
		sportsEvents
	}
	h := &sportsEventsHandler{hdlr}
	return s.Handle(s.NewHandler(&SportsEvents{h}, opts...))
}

type sportsEventsHandler struct {
	SportsEventsHandler
}

func (h *sportsEventsHandler) ListEvents(ctx context.Context, in *ListEventsRequest, out *ListEventsResponse) error {
	return h.SportsEventsHandler.ListEvents(ctx, in, out)
}

func (h *sportsEventsHandler) GetEvent(ctx context.Context, in *GetEventRequest, out *GetEventsResponse) error {
	return h.SportsEventsHandler.GetEvent(ctx, in, out)
}
